#BlueJ class context
comment0.params=sizeOfGrid
comment0.target=FutoshikiPuzzle(int)
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ FutoshikiPuzzle\r\n\ \r\n\ @param\ sizeOfGrid\ \ \ \ A\ size\ of\ grid\ for\ the\ puzzle\r\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\r\n\ Main\ method\ for\ FutoshikiPuzzle\r\n\ \r\n\ @param\ args\ \ \ \ \ \ First\ number\ you\ type\ in\ will\ determine\ size\ of\ grid,\ second\ will\ specify\ number\ of\ pre-filled\ numbers\ and/or\ constraints\ \r\n\ For\ example\ type\ 5\ and\ 7\ to\ get\ 5x5\ grid\ with\ 7\ pre-filled\ numbers\ and/or\ constraints\r\n
comment10.params=
comment10.target=void\ getProblems()
comment10.text=\r\n\ Prints\ out\ all\ problems\ in\ current\ game\r\n
comment11.params=a\ b
comment11.target=Constraint\ getRConstraint(int,\ int)
comment11.text=\r\n\ Get\ the\ object\ Constraint\ from\ rowConstraint\r\n\ \r\n\ @param\ a\ \ \ \ \ An\ integer\ coordinate\ of\ row\r\n\ @param\ b\ \ \ \ \ An\ integer\ coordinate\ of\ column\r\n
comment12.params=
comment12.target=boolean\ getShowProblems()
comment12.text=\r\n\ Get\ a\ value\ of\ ShowProblems\r\n\ \r\n\ @return\ \ \ \ \ \ A\ boolean\ value\ of\ ShowProblems\r\n
comment13.params=a\ b
comment13.target=int\ getSquare(int,\ int)
comment13.text=\r\n\ Get\ value\ of\ FutoshikiSquare\r\n\ \r\n\ @param\ a\ \ \ \ \ An\ integer\ coordinate\ of\ row\r\n\ @param\ b\ \ \ \ \ An\ integer\ coordinate\ of\ column\r\n
comment14.params=
comment14.target=boolean\ isComplete()
comment14.text=\r\n\ Check\ if\ there\ is\ any\ empty\ square\ (square\ with\ value\ of\ 0)\ in\ current\ grid.\ \r\n\ If\ there\ is\ none,\ it\ check\ if\ there\ is\ any\ problem\ with\ current\ grid\r\n\ If\ there\ is\ none,\ it\ returns\ true,\ false\ otherwise\r\n\ \r\n\ @return\ \ \ \ \ \ true\ if\ grid\ is\ full\ and\ legal,\ false\ otherwise\r\n
comment15.params=
comment15.target=boolean\ isLegal()
comment15.text=\r\n\ Returns\ true\ if\ there\ are\ no\ violations\ of\ constraints\ and\ no\ repeating\ numbers\ in\ rows\ or\ columns\r\n\ \r\n\ @return\ \ \ \ \ \ False\ if\ there\ is\ more\ than\ one\ number\ of\ same\ value\ in\ row\ or\ column,\ or\ if\ any\ of\ the\ constraints\ were\ violated,\ true\ otherwise\r\n
comment16.params=
comment16.target=void\ loadGame()
comment16.text=\r\n\ Load\ last\ saved\ game\ from\ the\ text\ file\r\n
comment17.params=
comment17.target=void\ printPuzzle()
comment17.text=\r\n\ Prints\ out\ the\ puzzle\r\n
comment18.params=
comment18.target=void\ resetPuzzle()
comment18.text=\r\n\ Resets\ all\ the\ arrays\ to\ default\ values\r\n
comment19.params=
comment19.target=void\ restoreBackup()
comment19.text=\r\n\ Restore\ grid\ from\ the\ gameBackup\r\n
comment2.params=
comment2.target=void\ checkErrors()
comment2.text=\r\n\ Go\ through\ whole\ grid,\ check\ each\ square\ and\ colour\ it\ red\ if\ it\ violate\ the\ grid,\ get\ default\ background\ if\ its\ fine\r\n
comment20.params=
comment20.target=void\ saveGame()
comment20.text=\r\n\ Save\ current\ state\ of\ the\ game\ to\ a\ text\ file\r\n
comment21.params=a\ b\ item
comment21.target=void\ setColumnConstraint(int,\ int,\ java.lang.String)
comment21.text=\r\n\ Assigns\ a\ sign\ to\ constraint\ with\ coordinates\ [a][b]\r\n\ \r\n\ @param\ \ a\ \ \ \ \ \ \ \ A\ row\ number\r\n\ @param\ \ b\ \ \ \ \ \ \ \ A\ column\ number\r\n\ @param\ \ item\ \ \ \ \ A\ sign\ that\ goes\ between\ squares\ [a][b]\ and\ [a][b+1]\r\n
comment22.params=a\ b\ item
comment22.target=void\ setRowConstraint(int,\ int,\ java.lang.String)
comment22.text=\r\n\ Assigns\ a\ sign\ to\ constraint\ with\ coordinates\ [a][b]\r\n\ \r\n\ @param\ \ a\ \ \ \ \ \ \ \ A\ row\ number\r\n\ @param\ \ b\ \ \ \ \ \ \ \ A\ column\ number\r\n\ @param\ \ item\ \ \ \ \ A\ sign\ that\ goes\ between\ squares\ [a][b]\ and\ [a][b+1]\r\n
comment23.params=a
comment23.target=void\ setShowProblems(boolean)
comment23.text=\r\n\ Set\ a\ value\ for\ ShowProblems\r\n\ \r\n\ @param\ a\ \ \ \ \ A\ boolean\ value\ for\ ShowProblems\r\n
comment24.params=a\ b\ item
comment24.target=void\ setSquare(int,\ int,\ int)
comment24.text=\r\n\ Assigns\ a\ value\ to\ square\ at\ coordinates\ [a][b].\r\n\ Enter\ 0\ to\ delete\ the\ value\ of\ square\r\n\ \r\n\ @param\ \ a\ \ \ \ \ \ \ \ A\ row\ number\r\n\ @param\ \ b\ \ \ \ \ \ \ \ A\ column\ number\r\n\ @param\ \ item\ \ \ \ \ An\ integer\ to\ put\ in\ the\ array\r\n
comment25.params=
comment25.target=void\ showComplete()
comment25.text=\r\n\ Check\ if\ the\ grid\ is\ complete,\ if\ yes\ then\ change\ background\ colour\ of\ each\ FutoshikiSquare\ to\ green\r\n
comment26.params=
comment26.target=boolean\ solve()
comment26.text=\r\n\ Recursive\ method\ that\ attemps\ to\ solve\ the\ current\ state\ of\ FutoshikiPuzzle\ by\ finding\ first\ empty\ field,\ increase\ its\ value,\r\n\ and\ run\ itself\ again,\ if\ it\ comes\ back\ false,\ increase\ value\ again\ and\ so\ on.\r\n\ \r\n\ @return\ \ \ \ \ \ Returns\ False\ if\ current\ game\ is\ already\ not\ Legal\ or\ unsolvable,\ returns\ True\ when\ solved.\r\n
comment27.params=whichColumn
comment27.target=boolean\ validColumn(int)
comment27.text=\r\n\ Returns\ true\ if\ there\ are\ no\ invalid\ or\ repeating\ numbers\ in\ specified\ column\r\n\ \r\n\ @param\ whichColumn\ \ \ \ \ \ \ Number\ of\ column\ to\ be\ checked\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ False\ if\ there\ is\ more\ than\ one\ number\ of\ same\ value\ in\ column,\ True\ otherwise\r\n
comment28.params=
comment28.target=boolean\ validColumnConstraints()
comment28.text=\r\n\ Returns\ true\ if\ there\ are\ no\ violation\ of\ constraints\ in\ specified\ column\r\n\ \r\n\ @return\ \ \ \ \ \ False\ if\ there\ is\ any\ violation\ of\ column\ constraints,\ true\ otherwise\r\n
comment29.params=whichRow
comment29.target=boolean\ validRow(int)
comment29.text=\r\n\ Returns\ true\ if\ there\ are\ no\ invalid\ or\ repeating\ numbers\ in\ specified\ row\r\n\ \r\n\ @param\ whichRow\ \ \ \ \ \ Number\ of\ column\ to\ be\ checked\r\n\ @return\ \ \ \ \ \ \ \ \ \ \ \ \ \ False\ if\ there\ is\ more\ than\ one\ number\ of\ same\ value\ in\ row,\ True\ otherwise\r\n
comment3.params=a\ b
comment3.target=void\ copyGames(FutoshikiPuzzle,\ FutoshikiPuzzle)
comment3.text=\r\n\ Copy\ one\ game\ to\ another,\ not\ just\ pointers,\ copy\ actual\ values.\r\n\ \r\n\ @param\ a\ \ \ \ \ FutoshikiPuzzle\ that\ needs\ to\ be\ backed\ up\r\n\ @param\ b\ \ \ \ \ FutoshikiPuzzle\ that\ is\ backed\ up\ to\r\n
comment30.params=
comment30.target=boolean\ validRowConstraints()
comment30.text=\r\n\ Returns\ true\ if\ there\ are\ no\ violation\ of\ constraints\ in\ specified\ row\r\n\ \r\n\ @return\ \ \ \ \ \ False\ if\ there\ is\ any\ violation\ of\ row\ constraints,\ true\ otherwise\r\n
comment31.params=R\ C
comment31.target=boolean\ validSquare(int,\ int)
comment31.text=\r\n\ Check\ validity\ of\ one\ square\ by\ checking\ if\ the\ same\ value\ is\ repeated\ in\ any\ other\ square\ in\ the\ same\ row\ or\ column\r\n\ \r\n\ @return\ \ \ \ \ \ Return\ false\ if\ the\ value\ of\ square\ is\ repeated\ in\ the\ same\ row\ or\ column,\ return\ true\ otherwise\r\n
comment4.params=
comment4.target=void\ fillFirstPuzzle()
comment4.text=\r\n\ Create\ predefined\ puzzle\r\n
comment5.params=fillNum
comment5.target=void\ fillPuzzle(int)
comment5.text=\r\n\ Creates\ a\ random\ number\ of\ occurences\ to\ fill\ some\ fields,\ and/or\ constraints.\ 0\ will\ empty\ the\ puzzle.\r\n\ \r\n\ @param\ \ fillNum\ \ \ \ \ \ \ \ A\ number\ of\ random\ constraints\ and/or\ numbers\ to\ be\ pre-filled\r\n
comment6.params=
comment6.target=FutoshikiSquare\ findEmpty()
comment6.text=\r\n\ search\ grid\ for\ and\ square\ that\ is\ empty\ (square\ with\ value\ 0)\r\n\ \r\n\ @return\ \ \ \ \ \ A\ FutoshikiSquare\ object\ with\ value\ 0\r\n
comment7.params=a\ b
comment7.target=FutoshikiSquare\ getButton(int,\ int)
comment7.text=\r\n\ Get\ the\ object\ FutoshikiSquare\ from\ grid\r\n\ \r\n\ @param\ a\ \ \ \ \ An\ integer\ coordinate\ of\ row\r\n\ @param\ b\ \ \ \ \ An\ integer\ coordinate\ of\ column\r\n
comment8.params=a\ b
comment8.target=Constraint\ getCConstraint(int,\ int)
comment8.text=\r\n\ Get\ the\ object\ Constraint\ from\ columnConstraint\r\n\ \r\n\ @param\ a\ \ \ \ \ An\ integer\ coordinate\ of\ row\r\n\ @param\ b\ \ \ \ \ An\ integer\ coordinate\ of\ column\r\n
comment9.params=
comment9.target=int\ getGridSize()
comment9.text=\r\n\ Get\ a\ value\ of\ gridSize\r\n\ \r\n\ @return\ \ \ \ \ \ An\ integer\ value\ of\ gridSize\r\n
numComments=32
